import { format } from 'date-fns';
import { ShieldExclamationIcon, ClockIcon, DocumentTextIcon } from '@heroicons/react/24/outline';

interface ScanResult {
  engine: string;
  result: string;
  version: string;
  update: string;
}

interface VirusTotalDetails {
  filename: string;
  size: number;
  hash: string;
  scanDate: string;
  positives: number;
  totalEngines: number;
  permalink: string;
  scans: ScanResult[];
}

interface Finding {
  type: string;
  severity: 'LOW' | 'MEDIUM' | 'HIGH';
  description: string;
  details: VirusTotalDetails;
}

interface VirusTotalResultsProps {
  findings: Finding[] | null;
  scanDate: Date;
}

export default function VirusTotalResults({ findings, scanDate }: VirusTotalResultsProps) {
  if (!findings || findings.length === 0) {
    return (
      <div className="bg-gray-900 rounded-lg p-6">
        <div className="flex items-center justify-center text-gray-400">
          <ClockIcon className="h-5 w-5 mr-2" />
          <span>No scan results available</span>
        </div>
      </div>
    );
  }

  const vtFinding = findings.find(f => f.type === 'VIRUSTOTAL_SCAN');

  if (!vtFinding) {
    return (
      <div className="bg-gray-900 rounded-lg p-6">
        <div className="flex items-center justify-center text-gray-400">
          <DocumentTextIcon className="h-5 w-5 mr-2" />
          <span>No VirusTotal scan results found</span>
        </div>
      </div>
    );
  }

  const { details } = vtFinding;
  const detectionRate = (details.positives / details.totalEngines) * 100;

  const getSeverityClasses = (rate: number) => {
    if (rate > 50) {
      return {
        badge: 'bg-red-500/10 border-red-500/20',
        text: 'text-red-400'
      };
    }
    if (rate > 20) {
      return {
        badge: 'bg-yellow-500/10 border-yellow-500/20',
        text: 'text-yellow-400'
      };
    }
    return {
      badge: 'bg-green-500/10 border-green-500/20',
      text: 'text-green-400'
    };
  };

  const severityClasses = getSeverityClasses(detectionRate);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-medium text-white">Scan Results</h3>
          <p className="text-sm text-gray-400">
            Scanned on {format(scanDate, 'PPp')}
          </p>
        </div>
        <div className={`px-3 py-1 rounded-full border ${severityClasses.badge}`}>
          <span className={`text-sm font-medium ${severityClasses.text}`}>
            {details.positives} / {details.totalEngines} Detections
          </span>
        </div>
      </div>

      {/* File Details */}
      <div className="bg-gray-800 rounded-lg p-4">
        <h4 className="text-sm font-medium text-white mb-2">File Details</h4>
        <dl className="grid grid-cols-1 gap-2 sm:grid-cols-2">
          <div>
            <dt className="text-sm text-gray-400">Filename</dt>
            <dd className="text-sm text-white">{details.filename}</dd>
          </div>
          <div>
            <dt className="text-sm text-gray-400">Size</dt>
            <dd className="text-sm text-white">{formatFileSize(details.size)}</dd>
          </div>
          <div>
            <dt className="text-sm text-gray-400">SHA-256</dt>
            <dd className="text-sm text-white font-mono text-xs">{details.hash}</dd>
          </div>
          <div>
            <dt className="text-sm text-gray-400">Scan Date</dt>
            <dd className="text-sm text-white">{format(new Date(details.scanDate), 'PPp')}</dd>
          </div>
        </dl>
      </div>

      {/* Detections Table */}
      {details.scans.length > 0 ? (
        <div className="bg-gray-800 rounded-lg overflow-hidden">
          <div className="px-4 py-3 border-b border-gray-700">
            <h4 className="text-sm font-medium text-white">Detected Threats</h4>
          </div>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-700">
              <thead className="bg-gray-800">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                    Antivirus
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                    Detection
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                    Version
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                    Last Update
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-700">
                {details.scans.map((scan, index) => (
                  <tr key={index} className="bg-gray-800">
                    <td className="px-4 py-2 text-sm text-white">{scan.engine}</td>
                    <td className="px-4 py-2 text-sm text-red-400">{scan.result}</td>
                    <td className="px-4 py-2 text-sm text-gray-400">{scan.version}</td>
                    <td className="px-4 py-2 text-sm text-gray-400">{scan.update}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      ) : (
        <div className="bg-green-500/10 border border-green-500/20 rounded-lg p-4">
          <div className="flex items-center">
            <ShieldExclamationIcon className="h-5 w-5 text-green-400 mr-2" />
            <span className="text-sm text-green-400">No threats detected</span>
          </div>
        </div>
      )}

      {/* VirusTotal Link */}
      <div className="flex justify-end">
        <a
          href={details.permalink}
          target="_blank"
          rel="noopener noreferrer"
          className="text-sm text-blue-400 hover:text-blue-300"
        >
          View full report on VirusTotal â†’
        </a>
      </div>
    </div>
  );
}

function formatFileSize(bytes: number): string {
  const units = ['B', 'KB', 'MB', 'GB'];
  let size = bytes;
  let unitIndex = 0;

  while (size >= 1024 && unitIndex < units.length - 1) {
    size /= 1024;
    unitIndex++;
  }

  return `${size.toFixed(1)} ${units[unitIndex]}`;
} 