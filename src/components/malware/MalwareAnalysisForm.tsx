'use client';

import { useState } from 'react';
import { CloudArrowUpIcon } from '@heroicons/react/24/outline';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';

export default function MalwareAnalysisForm() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [file, setFile] = useState<File | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [error, setError] = useState('');

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setFile(e.target.files[0]);
      setError('');
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!file) return;

    // Check if user is authenticated
    if (status === 'unauthenticated') {
      router.push('/auth/login');
      return;
    }

    try {
      setIsUploading(true);
      setUploadProgress(0);
      setError('');

      const formData = new FormData();
      formData.append('file', file);

      const response = await fetch('/api/malware-scan', {
        method: 'POST',
        body: formData,
        credentials: 'include', // Include credentials in the request
      });

      if (!response.ok) {
        const data = await response.json();
        if (response.status === 401) {
          router.push('/auth/login');
          return;
        }
        throw new Error(data.error || 'Upload failed');
      }

      // Reset form
      setFile(null);
      if (e.target instanceof HTMLFormElement) {
        e.target.reset();
      }

      // Refresh the page to show new results
      window.location.reload();

    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setIsUploading(false);
      setUploadProgress(100);
    }
  };

  // Show loading state while checking authentication
  if (status === 'loading') {
    return (
      <div className="flex items-center justify-center h-48">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // Show message if not authenticated
  if (status === 'unauthenticated') {
    return (
      <div className="text-center p-6">
        <p className="text-gray-400 mb-4">Please log in to analyze files</p>
        <button
          onClick={() => router.push('/auth/login')}
          className="px-4 py-2 bg-blue-600 hover:bg-blue-500 text-white rounded-lg transition-colors"
        >
          Log In
        </button>
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div>
        <label
          htmlFor="file-upload"
          className="flex flex-col items-center justify-center w-full h-48 border-2 border-gray-700 border-dashed rounded-lg cursor-pointer bg-gray-800 hover:bg-gray-700 transition-colors"
        >
          <div className="flex flex-col items-center justify-center pt-5 pb-6">
            <CloudArrowUpIcon className="w-12 h-12 mb-4 text-gray-400" />
            <p className="mb-2 text-sm text-gray-400">
              <span className="font-semibold">Click to upload</span> or drag and drop
            </p>
            <p className="text-xs text-gray-500">
              Supported file types: EXE, DLL, PDF, DOC, DOCX, XLS, XLSX
            </p>
          </div>
          <input
            id="file-upload"
            name="file"
            type="file"
            className="hidden"
            onChange={handleFileChange}
            accept=".exe,.dll,.pdf,.doc,.docx,.xls,.xlsx"
          />
        </label>
      </div>

      {file && (
        <div className="flex items-center gap-2 text-sm text-gray-400">
          <span>Selected file:</span>
          <span className="font-medium text-white">{file.name}</span>
          <span className="text-gray-500">({(file.size / 1024 / 1024).toFixed(2)} MB)</span>
        </div>
      )}

      {error && (
        <div className="p-4 bg-red-500/10 border border-red-500/20 rounded-lg">
          <p className="text-sm text-red-400">{error}</p>
        </div>
      )}

      <div className="flex items-center gap-4">
        <button
          type="submit"
          disabled={!file || isUploading}
          className={`px-4 py-2 text-sm font-medium rounded-lg ${
            !file || isUploading
              ? 'bg-blue-600/50 cursor-not-allowed'
              : 'bg-blue-600 hover:bg-blue-500'
          } text-white transition-colors`}
        >
          {isUploading ? 'Uploading...' : 'Start Analysis'}
        </button>

        {isUploading && (
          <div className="flex-1">
            <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
              <div
                className="h-full bg-blue-600 transition-all duration-300"
                style={{ width: `${uploadProgress}%` }}
              />
            </div>
          </div>
        )}
      </div>
    </form>
  );
} 