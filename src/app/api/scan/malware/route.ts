import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { prisma } from '@/lib/prisma';
import { createHash } from 'crypto';
import VirusTotal from 'node-virustotal';

const vt = new VirusTotal(process.env.VIRUSTOTAL_API_KEY);

export async function POST(req: Request) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const formData = await req.formData();
    const file = formData.get('file') as File;
    if (!file) {
      return NextResponse.json({ error: 'No file provided' }, { status: 400 });
    }

    // Convert file to buffer and calculate hash
    const buffer = Buffer.from(await file.arrayBuffer());
    const fileHash = createHash('sha256').update(buffer).digest('hex');

    // Check VirusTotal
    const vtData = await vt.fileReport(fileHash);
    if (!vtData) {
      return NextResponse.json({ error: 'Failed to get VirusTotal report' }, { status: 500 });
    }

    // Create security log for the scan
    await prisma.securityLog.create({
      data: {
        userId: session.user.id,
        type: 'MALWARE_SCAN',
        level: 'INFO',
        severity: vtData.positives > 0 ? 'HIGH' : 'LOW',
        description: `VirusTotal scan completed for file: ${file.name}. Found ${vtData.positives} threats.`,
        metadata: {
          filename: file.name,
          size: file.size,
          hash: fileHash,
          vtResults: {
            positives: vtData.positives,
            total: vtData.total,
            scanDate: vtData.scan_date,
            permalink: vtData.permalink
          }
        }
      }
    });

    return NextResponse.json({
      filename: file.name,
      hash: fileHash,
      positives: vtData.positives,
      total: vtData.total,
      scanDate: vtData.scan_date,
      permalink: vtData.permalink
    });
  } catch (error) {
    console.error('Malware scan error:', error);
    return NextResponse.json(
      { error: 'Failed to perform malware scan' },
      { status: 500 }
    );
  }
} 