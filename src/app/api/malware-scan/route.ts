import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '../auth/[...nextauth]/route';
import { prisma } from '@/lib/prisma';
import { writeFile, mkdir, readFile, unlink } from 'fs/promises';
import path from 'path';
import { createHash } from 'crypto';

const VIRUSTOTAL_API_KEY = process.env.VIRUSTOTAL_API_KEY as string;
const VIRUSTOTAL_API_URL = 'https://www.virustotal.com/vtapi/v2';

// Helper function to upload file to VirusTotal
async function uploadToVirusTotal(filePath: string): Promise<string> {
  const formData = new FormData();
  const fileBuffer = await readFile(filePath);
  formData.append('apikey', VIRUSTOTAL_API_KEY);
  formData.append('file', new Blob([fileBuffer]));

  const response = await fetch(`${VIRUSTOTAL_API_URL}/file/scan`, {
    method: 'POST',
    body: formData,
  });

  if (!response.ok) {
    throw new Error(`VirusTotal upload failed: ${response.statusText}`);
  }

  const data = await response.json();
  return data.resource;
}

// Helper function to get scan results from VirusTotal
async function getVirusTotalReport(resource: string): Promise<any> {
  const response = await fetch(
    `${VIRUSTOTAL_API_URL}/file/report?apikey=${VIRUSTOTAL_API_KEY}&resource=${resource}`
  );

  if (!response.ok) {
    throw new Error(`VirusTotal report fetch failed: ${response.statusText}`);
  }

  return response.json();
}

// Helper function to wait for scan results
async function waitForScanResults(resource: string, maxAttempts = 10): Promise<any> {
  for (let i = 0; i < maxAttempts; i++) {
    const report = await getVirusTotalReport(resource);
    
    if (report.response_code === 1) {
      return report;
    }
    
    // Wait 15 seconds before next attempt
    await new Promise(resolve => setTimeout(resolve, 15000));
  }
  throw new Error('Scan timeout');
}

// Helper function to clean up file
async function cleanupFile(filepath: string) {
  try {
    await unlink(filepath);
  } catch (error) {
    console.error('Error cleaning up file:', error);
  }
}

// Helper function to update scan status
async function updateScanStatus(scanId: string, status: 'FAILED' | 'COMPLETED', errorMessage?: string) {
  try {
    await prisma.scanResult.update({
      where: { id: scanId },
      data: {
        status,
        endTime: new Date(),
        findings: errorMessage ? [{
          type: 'ERROR',
          severity: 'HIGH',
          description: 'Scan failed',
          details: { error: errorMessage },
        }] : undefined,
      },
    });
  } catch (error) {
    console.error('Error updating scan status:', error);
  }
}

export async function POST(request: Request) {
  let scanResult = null;
  let uploadedFilePath = null;

  try {
    if (!VIRUSTOTAL_API_KEY) {
      throw new Error('VirusTotal API key not configured');
    }

    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      throw new Error('Unauthorized - Please log in');
    }

    // Verify user exists in database
    const user = await prisma.user.findUnique({
      where: { id: session.user.id },
      select: { id: true }
    });

    if (!user) {
      throw new Error('User not found - Please try logging in again');
    }

    // Create scan result record
    scanResult = await prisma.scanResult.create({
      data: {
        userId: user.id,
        scanType: 'MALWARE_SCAN',
        status: 'IN_PROGRESS',
        startTime: new Date(),
      },
    });

    const formData = await request.formData();
    const file = formData.get('file') as File;

    if (!file) {
      throw new Error('No file provided');
    }

    // Create uploads directory if it doesn't exist
    const uploadsDir = path.join(process.cwd(), 'uploads');
    await mkdir(uploadsDir, { recursive: true });

    // Generate a unique filename using file hash
    const buffer = await file.arrayBuffer();
    const hash = createHash('sha256').update(Buffer.from(buffer)).digest('hex');
    const filename = `${hash}${path.extname(file.name)}`;
    uploadedFilePath = path.join(uploadsDir, filename);

    // Save the file
    await writeFile(uploadedFilePath, Buffer.from(buffer));

    // Submit file to VirusTotal
    const resource = await uploadToVirusTotal(uploadedFilePath);
    if (!resource) {
      throw new Error('Failed to get scan resource ID from VirusTotal');
    }

    // Wait for scan results
    const vtResults = await waitForScanResults(resource);
    
    // Process scan results
    const findings = [{
      type: 'VIRUSTOTAL_SCAN',
      severity: vtResults.positives > 0 ? 'HIGH' : 'LOW',
      description: `VirusTotal scan completed: ${vtResults.positives}/${vtResults.total} engines detected threats`,
      details: {
        filename: file.name,
        size: file.size,
        hash: hash,
        scanDate: vtResults.scan_date,
        positives: vtResults.positives,
        totalEngines: vtResults.total,
        permalink: vtResults.permalink,
        scans: Object.entries(vtResults.scans)
          .filter(([_, result]: [string, any]) => result.detected)
          .map(([engine, result]: [string, any]) => ({
            engine,
            result: result.result,
            version: result.version,
            update: result.update,
          })),
      },
    }];

    // Update scan result with findings
    await prisma.scanResult.update({
      where: { id: scanResult.id },
      data: {
        status: 'COMPLETED',
        findings: findings,
        endTime: new Date(),
      },
    });

    // Create a security log entry
    await prisma.securityLog.create({
      data: {
        userId: session.user.id,
        level: 'INFO',
        severity: vtResults.positives > 0 ? 'HIGH' : 'LOW',
        event: 'MALWARE_SCAN',
        details: JSON.stringify({
          filename: file.name,
          size: file.size,
          hash: hash,
          vtResults: {
            positives: vtResults.positives,
            total: vtResults.total,
            scanDate: vtResults.scan_date,
            permalink: vtResults.permalink,
          }
        }),
        source: 'VIRUSTOTAL'
      }
    });

    return NextResponse.json({
      message: 'File scanned successfully',
      scanId: scanResult.id,
      findings,
    });

  } catch (error) {
    console.error('Error during malware analysis:', error);

    if (scanResult) {
      await updateScanStatus(
        scanResult.id,
        'FAILED',
        error instanceof Error ? error.message : 'Unknown error'
      );
    }

    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to analyze file' },
      { status: error instanceof Error && error.message.includes('Unauthorized') ? 401 : 500 }
    );

  } finally {
    // Clean up uploaded file
    if (uploadedFilePath) {
      await cleanupFile(uploadedFilePath);
    }
  }
} 