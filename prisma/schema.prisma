// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           String    @default("user")
  isAdmin        Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  securityLogs   SecurityLog[]
  scanResults    ScanResult[]
  settings       Settings?
  systemHealth   SystemHealth[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SystemConfig {
  id                 String   @id @default(cuid())
  maxUploadSize      Int      @default(100)
  scanTimeout        Int      @default(300)
  maxConcurrentScans Int      @default(5)
  enableLogging      Boolean  @default(true)
  debugMode         Boolean  @default(false)
  active            Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([active])
}

model SecurityLog {
  id        String   @id @default(cuid())
  level     String   // INFO, WARNING, ERROR, CRITICAL
  severity  String   // LOW, MEDIUM, HIGH, CRITICAL
  type      String   // VULNERABILITY, SYSTEM_ALERT, ACCESS_ATTEMPT, etc.
  event     String
  details   String?  @db.Text
  source    String
  timestamp DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([level])
  @@index([timestamp])
  @@index([userId])
}

model ScanResult {
  id          String   @id @default(cuid())
  userId      String
  scanType    String   // e.g., "QUICK_SCAN", "FULL_SCAN", "VULNERABILITY_SCAN"
  status      String   // e.g., "IN_PROGRESS", "COMPLETED", "FAILED"
  findings    Json?
  startTime   DateTime @default(now())
  endTime     DateTime?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Settings {
  id                    String  @id @default(cuid())
  userId                String  @unique
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  autoScanEnabled       Boolean @default(true)
  scanInterval          Int     @default(24) // in hours
  notificationsEnabled  Boolean @default(true)
  twoFactorEnabled      Boolean @default(false)
  firewallEnabled       Boolean @default(true)
  firewallRules        Json?
  networkMonitoring    Boolean @default(true)
  aiInsightsEnabled    Boolean @default(true)
}

model SystemHealth {
  id             String   @id @default(cuid())
  userId         String
  cpuUsage       Float
  memoryUsage    Float
  diskUsage      Float
  networkLatency Float
  metadata       Json?    // Add metadata field to store system tools and log analysis data
  timestamp      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
} 